Command queue: IS THIS NECESSARY?
PROS: limit complexity of directed graph
CON: adds complexity of its own
If frontier runnables full: enqueue instead of add to graph
While frontier runnables not full: add to directed graph from queue



Implementing IF:

nif:
1) Create graph node for NIF
2) Resolve file accesses of cond, if, and else part, add as file access of NIF
3) NIF becomes frontier node, then running frontier node.
4) Evaluate cond part.  meanwhile other commands may come in... what to do?
	Add to graph. dgNIF counts as 1 dependency
4) Cond returns status.
	i) Copy NIF's depedents list as post-commands list. Decrement their depedency count by 1 (for the now finished NIF)
	ii) dg_dep_add either if or else part to graph. ALL these nodes are NIF's depedents.
	iii) dg_dep_add commands from post-commands list.
	iv) Remove NIF node. Rest takes care of itself.


TODO:
Refactor node wrapping code in dgraph.c: node_proc
